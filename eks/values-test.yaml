additionalPrometheusRulesMap:
  custom-rules:
    groups:
    - name: kube-state-metrics-custom
      rules:
      - alert: KubernetesNodeMemoryPressure
        expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: Kubernetes Node memory pressure (instance {{ $labels.instance }})
          description: "Node {{ $labels.node }} has MemoryPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesNodeDiskPressure
        expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: Kubernetes Node disk pressure (instance {{ $labels.instance }})
          description: "Node {{ $labels.node }} has DiskPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesNodeNetworkUnavailable
        expr: kube_node_status_condition{condition="NetworkUnavailable",status="true"} == 1
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: Kubernetes Node network unavailable (instance {{ $labels.instance }})
          description: "Node {{ $labels.node }} has NetworkUnavailable condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesNodeOutOfPodCapacity
        expr: sum by (cluster, node) ((kube_pod_status_phase{phase="Running"} == 1) + on(uid) group_left(node) (0 * kube_pod_info{pod_template_hash=""})) / sum by (cluster, node) (kube_node_status_allocatable{resource="pods"}) * 100 > 90
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: Kubernetes Node out of pod capacity (instance {{ $labels.instance }})
          description: "Node {{ $labels.node }} is out of pod capacity\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesContainerOomKiller
        expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: Kubernetes Container oom killer (instance {{ $labels.instance }})
          description: "Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesJobFailed
        expr: kube_job_status_failed > 0
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: Kubernetes Job failed (instance {{ $labels.instance }})
          description: "Job {{ $labels.namespace }}/{{ $labels.job_name }} failed to complete\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesCronjobSuspended
        expr: kube_cronjob_spec_suspend != 0
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: Kubernetes CronJob suspended (instance {{ $labels.instance }})
          description: "CronJob {{ $labels.namespace }}/{{ $labels.cronjob }} is suspended\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesPersistentvolumeclaimPending
        expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: Kubernetes PersistentVolumeClaim pending (instance {{ $labels.instance }})
          description: "PersistentVolumeClaim {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is pending\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesVolumeOutOfDiskSpace
        expr: kubelet_volume_stats_available_bytes / kubelet_volume_stats_capacity_bytes * 100 < 10
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: Kubernetes Volume out of disk space (instance {{ $labels.instance }})
          description: "Volume is almost full (< 10% left)\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesVolumeFullInFourDays
        expr: predict_linear(kubelet_volume_stats_available_bytes[6h], 4 * 24 * 3600) < 0
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Kubernetes Volume full in four days (instance {{ $labels.instance }})
          description: "Volume under {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is expected to fill up within four days. Currently {{ $value | humanize }}% is available.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesStatefulsetDown
        expr: kube_statefulset_replicas != kube_statefulset_status_replicas_ready > 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Kubernetes StatefulSet down (instance {{ $labels.instance }})
          description: "StatefulSet {{ $labels.namespace }}/{{ $labels.statefulset }} went down\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesPodNotHealthy
        expr: sum by (cluster, namespace, pod) (kube_pod_status_phase{phase=~"Pending|Unknown|Failed"}) > 0
        for: 15m
        labels:
          severity: critical
        annotations:
          summary: Kubernetes Pod not healthy (instance {{ $labels.instance }})
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-running state for longer than 15 minutes.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: KubernetesPodCrashLooping
        expr: increase(kube_pod_container_status_restarts_total[1m]) > 3
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: Kubernetes pod crash looping (instance {{ $labels.instance }})
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
      - alert: Deployment at 0 Replicas
        expr: sum(kube_deployment_status_replicas{pod_template_hash=""}) by (cluster, deployment,namespace) < 1
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Deployment {{$labels.deployment}} is currently having no pods running

alertmanager:
  ingress:
    enabled: true
    ingressClassName: alb
    annotations:
      alb.ingress.kubernetes.io/group.name: alertmanager-ingress
      alb.ingress.kubernetes.io/group.order: '100'
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTP": 9093}]'
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/success-codes: 200-404
      alb.ingress.kubernetes.io/tags: GBL_CLASS_0=OPERATIONS, GBL_CLASS_1=MONITORING, GBL_CLASS_2=ALB
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/inbound-cidrs: 210.94.41.89/29,203.126.64.64/29
      alb.ingress.kubernetes.io/subnets: subnet-04e9887ac1614b387,subnet-06b834c4b48eaa652,subnet-0eb4368df80bf7b53
    paths:
      - /
    pathType: Prefix

  config:
    route:
      group_by: ['namespace']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'email-aws-ses'
      routes:
      - receiver: 'null'
        matchers:
          - alertname = "Watchdog"
      - receiver: 'email-aws-ses'
        matchers:
          - severity="critical"
        continue: true
      - receiver: 'email-aws-ses'
        matchers:
          - severity="warning"
        continue: true
    receivers:
      - name: 'null'
      - name: 'email-aws-ses'
        email_configs:
        - to: 'edizon.napa@yahoo.com'
          from: 'accnttest0543@gmail.com'
          auth_username: 'AKIARLF76ZFCGDZYIKP3'
          auth_password: 'BDanooiF1E5JIO8WLTN6bCvVP0q37n6dSr+ZkBDtFgUO'
          smarthost: 'email-smtp.ap-southeast-1.amazonaws.com:465'
          startTLS_policy: 'MandatoryStartTLS'
          require_tls: true
          send_resolved: true
    templates:
    - '/etc/alertmanager/config/*.tmpl'

grafana:
  adminPassword: prom-operator

  ingress:
    enabled: false
    ingressClassName: alb
    annotations:
      alb.ingress.kubernetes.io/group.name: grafana-ingress
      alb.ingress.kubernetes.io/group.order: '100'
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTP": 3000}]'
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/success-codes: 200-404
      alb.ingress.kubernetes.io/tags: GBL_CLASS_0=OPERATIONS, GBL_CLASS_1=MONITORING, GBL_CLASS_2=ALB
      alb.ingress.kubernetes.io/target-type: ip

  service:
    type: ClusterIP
    port: 80
    targetPort: 3000

  assertNoLeakedSecrets: false

  grafana.ini:
    smtp:
      enabled: true
      host: 'email-smtp.ap-southheast-1.amazonaws.com:587'
      # user: 'AKIAZQ3WTRSEFGR6I6OF'
      # password: 'BJ7PhwiYcVjdKvrRCnNLgvemCjoaPN1z/84JsMxCfN9t'
      from_address: 'edizon.napa@yahoo.com'
      startTLS_policy: 'MandatoryStartTLS'
     
prometheus:
  ingress:
    enabled: true
    ingressClassName: alb
    annotations:
      alb.ingress.kubernetes.io/group.name: prometheus-ingress
      alb.ingress.kubernetes.io/group.order: '100'
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTP": 9090}]'
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/success-codes: 200-404
      alb.ingress.kubernetes.io/tags: GBL_CLASS_0=OPERATIONS, GBL_CLASS_1=MONITORING, GBL_CLASS_2=ALB
      alb.ingress.kubernetes.io/target-type: ip
    paths: 
      - /
    pathType: Prefix

  service:
    type: ClusterIP
    port: 80
    targetPort: 9090
